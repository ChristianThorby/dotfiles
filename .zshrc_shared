HIST_STAMPS="mm/dd/yyyy"
HISTFILE=$HOME/.zsh_history
HISTSIZE=100000
PROMPT='%n@%m:%~%# '

## Enable vi mode
bindkey -v

export HISTSIZE=1000000000
export SAVEHIST=1000000000
export PATH="$HOME/bin:${PATH}"
export LESSKEYIN=~/.config/.lesskey

bindkey "^k" up-line-or-search
bindkey "^j" down-line-or-search

# Share history between all sessions.
setopt SHARE_HISTORY

# Do not record an event that was just recorded again.
setopt HIST_IGNORE_DUPS

# Do not write a duplicate event to the history file.
setopt HIST_SAVE_NO_DUPS

# Expire a duplicate event first when trimming history.
setopt HIST_EXPIRE_DUPS_FIRST

# Immediate write to history instead of waiting for tab to close
setopt INC_APPEND_HISTORY

# Timestamps in history
setopt EXTENDED_HISTORY

# Delete an old recorded event if a new event is a duplicate.
# not quite sure exactly what this does
# setopt HIST_IGNORE_ALL_DUPS

# Do not record an event starting with a space.
setopt HIST_IGNORE_SPACE

alias vim="nvim"
alias sr='source ~/.zshrc'
alias rs='source ~/.zshrc'

git!() {
  command git "$@"
}

git() {
  # checks current shells option-flags to see if git is called from a non-interactive shell i.e a script
  # we don't want to mess with git commands if called from a script, so run the command as normal 
  # without any modifications
  if [[ $- != *i* ]]; then
    command git "$@"
    return
  fi

  declare -A corrections=(
    ["statsu"]="status"
    ["stauts"]="status"
    ["commmit"]="commit"
    ["chekcout"]="checkout"
    ["pul"]="pull"
    ["psuh"]="push"
    ["puhs"]="push"
    ["idff"]="diff"
  )

  declare -A append=(
    ["reflog"]=" --date=iso"
    ["test"]=" test appended string"
  )

  local subcmd="$1"

  if [[ -n "${corrections[$subcmd]}" ]]; then
    correctly_spelled_subcmd="${corrections[$subcmd]}"
    shift
    echo "Correcting $subcmd to $correctly_spelled_subcmd"
    set -- "$correctly_spelled_subcmd" "$@"
  fi

  if [[ -n "${append[$subcmd]}" ]]; then
    append_string="${append[$subcmd]}"
    echo "Appending $append_string to $@"
    set -- "$@" "$append_string"
  fi

  command git "$@"

  if [ "$subcmd" != "status" ]; then
    echo "\n\n-! Status !-"
    command git status
  fi
}

# Set up fzf key bindings and fuzzy completion
source <(fzf --zsh)

eval "$(starship init zsh)"
